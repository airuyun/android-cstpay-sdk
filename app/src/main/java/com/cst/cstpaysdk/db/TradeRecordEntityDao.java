package com.cst.cstpaysdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cst.cstpaysdk.db.entity.TradeRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRADE_RECORD_ENTITY".
*/
public class TradeRecordEntityDao extends AbstractDao<TradeRecordEntity, Long> {

    public static final String TABLENAME = "TRADE_RECORD_ENTITY";

    /**
     * Properties of entity TradeRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserCode = new Property(3, String.class, "userCode", false, "USER_CODE");
        public final static Property ShopId = new Property(4, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(5, String.class, "shopName", false, "SHOP_NAME");
        public final static Property TradeTime = new Property(6, String.class, "tradeTime", false, "TRADE_TIME");
        public final static Property Dealserial = new Property(7, String.class, "dealserial", false, "DEALSERIAL");
        public final static Property Amount = new Property(8, String.class, "amount", false, "AMOUNT");
        public final static Property Balance = new Property(9, String.class, "balance", false, "BALANCE");
        public final static Property TradeType = new Property(10, String.class, "tradeType", false, "TRADE_TYPE");
        public final static Property TradeMethod = new Property(11, String.class, "tradeMethod", false, "TRADE_METHOD");
        public final static Property CardNo = new Property(12, String.class, "cardNo", false, "CARD_NO");
        public final static Property PhotoMsg = new Property(13, String.class, "photoMsg", false, "PHOTO_MSG");
        public final static Property PhysicsNo = new Property(14, String.class, "physicsNo", false, "PHYSICS_NO");
        public final static Property SyncState = new Property(15, String.class, "syncState", false, "SYNC_STATE");
        public final static Property Mac = new Property(16, String.class, "mac", false, "MAC");
        public final static Property OldMac = new Property(17, String.class, "oldMac", false, "OLD_MAC");
        public final static Property SyncCount = new Property(18, Integer.class, "syncCount", false, "SYNC_COUNT");
    }


    public TradeRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TradeRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRADE_RECORD_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"USER_CODE\" TEXT," + // 3: userCode
                "\"SHOP_ID\" TEXT," + // 4: shopId
                "\"SHOP_NAME\" TEXT," + // 5: shopName
                "\"TRADE_TIME\" TEXT," + // 6: tradeTime
                "\"DEALSERIAL\" TEXT," + // 7: dealserial
                "\"AMOUNT\" TEXT," + // 8: amount
                "\"BALANCE\" TEXT," + // 9: balance
                "\"TRADE_TYPE\" TEXT," + // 10: tradeType
                "\"TRADE_METHOD\" TEXT," + // 11: tradeMethod
                "\"CARD_NO\" TEXT," + // 12: cardNo
                "\"PHOTO_MSG\" TEXT," + // 13: photoMsg
                "\"PHYSICS_NO\" TEXT," + // 14: physicsNo
                "\"SYNC_STATE\" TEXT," + // 15: syncState
                "\"MAC\" TEXT," + // 16: mac
                "\"OLD_MAC\" TEXT," + // 17: oldMac
                "\"SYNC_COUNT\" INTEGER);"); // 18: syncCount
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TRADE_RECORD_ENTITY_DEALSERIAL ON \"TRADE_RECORD_ENTITY\"" +
                " (\"DEALSERIAL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRADE_RECORD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TradeRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(5, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(7, tradeTime);
        }
 
        String dealserial = entity.getDealserial();
        if (dealserial != null) {
            stmt.bindString(8, dealserial);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(9, amount);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(10, balance);
        }
 
        String tradeType = entity.getTradeType();
        if (tradeType != null) {
            stmt.bindString(11, tradeType);
        }
 
        String tradeMethod = entity.getTradeMethod();
        if (tradeMethod != null) {
            stmt.bindString(12, tradeMethod);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(13, cardNo);
        }
 
        String photoMsg = entity.getPhotoMsg();
        if (photoMsg != null) {
            stmt.bindString(14, photoMsg);
        }
 
        String physicsNo = entity.getPhysicsNo();
        if (physicsNo != null) {
            stmt.bindString(15, physicsNo);
        }
 
        String syncState = entity.getSyncState();
        if (syncState != null) {
            stmt.bindString(16, syncState);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(17, mac);
        }
 
        String oldMac = entity.getOldMac();
        if (oldMac != null) {
            stmt.bindString(18, oldMac);
        }
 
        Integer syncCount = entity.getSyncCount();
        if (syncCount != null) {
            stmt.bindLong(19, syncCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TradeRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(5, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(6, shopName);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(7, tradeTime);
        }
 
        String dealserial = entity.getDealserial();
        if (dealserial != null) {
            stmt.bindString(8, dealserial);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(9, amount);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(10, balance);
        }
 
        String tradeType = entity.getTradeType();
        if (tradeType != null) {
            stmt.bindString(11, tradeType);
        }
 
        String tradeMethod = entity.getTradeMethod();
        if (tradeMethod != null) {
            stmt.bindString(12, tradeMethod);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(13, cardNo);
        }
 
        String photoMsg = entity.getPhotoMsg();
        if (photoMsg != null) {
            stmt.bindString(14, photoMsg);
        }
 
        String physicsNo = entity.getPhysicsNo();
        if (physicsNo != null) {
            stmt.bindString(15, physicsNo);
        }
 
        String syncState = entity.getSyncState();
        if (syncState != null) {
            stmt.bindString(16, syncState);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(17, mac);
        }
 
        String oldMac = entity.getOldMac();
        if (oldMac != null) {
            stmt.bindString(18, oldMac);
        }
 
        Integer syncCount = entity.getSyncCount();
        if (syncCount != null) {
            stmt.bindLong(19, syncCount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TradeRecordEntity readEntity(Cursor cursor, int offset) {
        TradeRecordEntity entity = new TradeRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shopId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tradeTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dealserial
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // amount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // balance
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tradeType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tradeMethod
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // cardNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // photoMsg
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // physicsNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // syncState
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // mac
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // oldMac
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) // syncCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TradeRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShopId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTradeTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDealserial(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAmount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBalance(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTradeType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTradeMethod(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCardNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPhotoMsg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhysicsNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSyncState(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMac(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOldMac(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSyncCount(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TradeRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TradeRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TradeRecordEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
