package com.cst.cstpaysdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cst.cstpaysdk.db.entity.CardInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_INFO_ENTITY".
*/
public class CardInfoEntityDao extends AbstractDao<CardInfoEntity, Long> {

    public static final String TABLENAME = "CARD_INFO_ENTITY";

    /**
     * Properties of entity CardInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecordId = new Property(1, String.class, "recordId", false, "RECORD_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property UserCode = new Property(3, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property UserType = new Property(5, String.class, "userType", false, "USER_TYPE");
        public final static Property UserDept = new Property(6, String.class, "userDept", false, "USER_DEPT");
        public final static Property CardNo = new Property(7, String.class, "cardNo", false, "CARD_NO");
        public final static Property CardPhysics = new Property(8, String.class, "cardPhysics", false, "CARD_PHYSICS");
        public final static Property OperateType = new Property(9, String.class, "operateType", false, "OPERATE_TYPE");
        public final static Property RecordTime = new Property(10, String.class, "recordTime", false, "RECORD_TIME");
    }


    public CardInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CardInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RECORD_ID\" TEXT," + // 1: recordId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"USER_CODE\" TEXT," + // 3: userCode
                "\"USER_NAME\" TEXT," + // 4: userName
                "\"USER_TYPE\" TEXT," + // 5: userType
                "\"USER_DEPT\" TEXT," + // 6: userDept
                "\"CARD_NO\" TEXT," + // 7: cardNo
                "\"CARD_PHYSICS\" TEXT," + // 8: cardPhysics
                "\"OPERATE_TYPE\" TEXT," + // 9: operateType
                "\"RECORD_TIME\" TEXT);"); // 10: recordTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CARD_INFO_ENTITY_RECORD_ID ON \"CARD_INFO_ENTITY\"" +
                " (\"RECORD_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(6, userType);
        }
 
        String userDept = entity.getUserDept();
        if (userDept != null) {
            stmt.bindString(7, userDept);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(8, cardNo);
        }
 
        String cardPhysics = entity.getCardPhysics();
        if (cardPhysics != null) {
            stmt.bindString(9, cardPhysics);
        }
 
        String operateType = entity.getOperateType();
        if (operateType != null) {
            stmt.bindString(10, operateType);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(11, recordTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(4, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(6, userType);
        }
 
        String userDept = entity.getUserDept();
        if (userDept != null) {
            stmt.bindString(7, userDept);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(8, cardNo);
        }
 
        String cardPhysics = entity.getCardPhysics();
        if (cardPhysics != null) {
            stmt.bindString(9, cardPhysics);
        }
 
        String operateType = entity.getOperateType();
        if (operateType != null) {
            stmt.bindString(10, operateType);
        }
 
        String recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindString(11, recordTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardInfoEntity readEntity(Cursor cursor, int offset) {
        CardInfoEntity entity = new CardInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recordId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userDept
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cardNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cardPhysics
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // operateType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // recordTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserDept(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCardNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCardPhysics(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOperateType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecordTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
