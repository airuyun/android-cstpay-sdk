package com.cst.cstpaysdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cst.cstpaysdk.db.entity.EquipmentCreditEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EQUIPMENT_CREDIT_ENTITY".
*/
public class EquipmentCreditEntityDao extends AbstractDao<EquipmentCreditEntity, Long> {

    public static final String TABLENAME = "EQUIPMENT_CREDIT_ENTITY";

    /**
     * Properties of entity EquipmentCreditEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EquipmentId = new Property(1, String.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property OfflineNum = new Property(2, int.class, "offlineNum", false, "OFFLINE_NUM");
        public final static Property OfflineQuota = new Property(3, String.class, "offlineQuota", false, "OFFLINE_QUOTA");
        public final static Property ValidTime = new Property(4, String.class, "validTime", false, "VALID_TIME");
        public final static Property InvalidTime = new Property(5, String.class, "invalidTime", false, "INVALID_TIME");
        public final static Property Valid = new Property(6, String.class, "valid", false, "VALID");
    }


    public EquipmentCreditEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EquipmentCreditEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EQUIPMENT_CREDIT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EQUIPMENT_ID\" TEXT," + // 1: equipmentId
                "\"OFFLINE_NUM\" INTEGER NOT NULL ," + // 2: offlineNum
                "\"OFFLINE_QUOTA\" TEXT," + // 3: offlineQuota
                "\"VALID_TIME\" TEXT," + // 4: validTime
                "\"INVALID_TIME\" TEXT," + // 5: invalidTime
                "\"VALID\" TEXT);"); // 6: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EQUIPMENT_CREDIT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EquipmentCreditEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(2, equipmentId);
        }
        stmt.bindLong(3, entity.getOfflineNum());
 
        String offlineQuota = entity.getOfflineQuota();
        if (offlineQuota != null) {
            stmt.bindString(4, offlineQuota);
        }
 
        String validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindString(5, validTime);
        }
 
        String invalidTime = entity.getInvalidTime();
        if (invalidTime != null) {
            stmt.bindString(6, invalidTime);
        }
 
        String valid = entity.getValid();
        if (valid != null) {
            stmt.bindString(7, valid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EquipmentCreditEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String equipmentId = entity.getEquipmentId();
        if (equipmentId != null) {
            stmt.bindString(2, equipmentId);
        }
        stmt.bindLong(3, entity.getOfflineNum());
 
        String offlineQuota = entity.getOfflineQuota();
        if (offlineQuota != null) {
            stmt.bindString(4, offlineQuota);
        }
 
        String validTime = entity.getValidTime();
        if (validTime != null) {
            stmt.bindString(5, validTime);
        }
 
        String invalidTime = entity.getInvalidTime();
        if (invalidTime != null) {
            stmt.bindString(6, invalidTime);
        }
 
        String valid = entity.getValid();
        if (valid != null) {
            stmt.bindString(7, valid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EquipmentCreditEntity readEntity(Cursor cursor, int offset) {
        EquipmentCreditEntity entity = new EquipmentCreditEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // equipmentId
            cursor.getInt(offset + 2), // offlineNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // offlineQuota
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // validTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // invalidTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // valid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EquipmentCreditEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEquipmentId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOfflineNum(cursor.getInt(offset + 2));
        entity.setOfflineQuota(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValidTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInvalidTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EquipmentCreditEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EquipmentCreditEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EquipmentCreditEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
